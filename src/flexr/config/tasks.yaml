retrieval_task:
  description: >
    Retrieve the most relevant documents or snippets from the internal knowledge base
    that could help answer the user's question: "{query}".
  expected_output: >
    A Pydantic SearchResults object, containing a 'results' field which is a list
    of SearchResult objects. Each SearchResult must include 'content', 'similarity',
    and 'metadata' fields.
  agent: information_retriever

answer_generation_task:
  description: |
    You will receive a Pydantic RerankedResults object from the `retrieval_task`.
    This RerankedResults object contains a single 'results' key, whose value is a **list of dictionaries**.
    Each dictionary in the 'results' list contains:
    - **content**: (string) The relevant text excerpt from the document.
    - **metadata**: (dictionary) This includes 'page_title' (string) and 'section_name' (string).

    **Your primary goal is to extract ONLY the substantive information that directly answers the user's question - {query}.**

    **Crucial Output Constraints - Read Carefully!**

    1. **Scenario: No Relevant Information Found**
       - **IF** the 'results' list in the RerankResults object is empty or null:
        - Your final output **MUST BE EXACTLY** this specific phrase: "No relevant information found in the knowledge base."
        - **STRICT RULE:** **DO NOT** add ANY other words, sentences, formatting, or explanations before or after this exact phrase. This phrase is the *entirety* of your output for this condition. **Think of this as a direct command, not a part of the answer.**

    2. **Scenario: Relevant Information Is Found**
       - **IF** the 'results' list in the RerankResults object has items:
        - You MUST create a well-formatted answer based on the filtered 'content'.
        - **YOUR OUTPUT MUST BE DESIGNED FOR A HUMAN CUSTOMER SERVICE AGENT TO SPEAK OR SEND DIRECTLY TO A CUSTOMER.**
        - Use **bold text**, bullet points, and clear formatting to enhance readability, tailored for a human customer service agent to use with a customer.
        - Image render: MUST Generate a Markdown image link ![alt text](URL) by extracting the 'description' for the alt text and the 'source' for the URL from the provided [IMAGE_INFO] JSON string IF IT EXISTS.
        - Table render: MUST Generate a Markdown table by extracting the 'markdown_table' from the provided [TABLE_INFO] JSON string IF IT EXISTS and do not miss any rows or columns.      
        - **Sources Section Requirement:** The "Sources" section **MUST BE FULLY AND ONLY** enclosed within a Markdown `<details>` tag.
        - **STRICT RULE:** **DO NOT** include any standalone "Sources:" heading, "Sources:" label, or similar text *outside* of the `<details>` block. The `<details>` block is the *only* allowed representation for sources.
        - Citations within the `<details>` block should be formatted as: "Page:[page_title] Section:(section_name)".
        - Ensure your answer contains **no timestamps or headers** from the original content.
        - **DO NOT** add any concluding conversational phrases about the answer itself (e.g., "This should provide a clear and concise guide...").

  expected_output: |
    # **Example for when results ARE found:**

    **This is an example of a well-formatted answer.** It uses bold text for emphasis and bullet points for lists:
    * Item one from the relevant information.
    * Item two, which directly answers the query.
    * Any other key details extracted from the content.

    <details>
    <summary>Sources</summary>
    Find more information in: Page:[page_title] Section:(section_name)
    </details>

    # **Example for when NO results are found:**

    No relevant information found in the knowledge base.

  agent: answer_generator