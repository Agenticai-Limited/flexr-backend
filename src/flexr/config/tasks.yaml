retrieval_task:
  description: >
    Retrieve the most relevant documents or snippets from the internal knowledge base
    that could help answer the user's question: "{query}".
  expected_output: >
    A Pydantic RerankedResults object, containing a 'results' field which is a list
    of RerankedResult objects. Each RerankedResult must include 'content', 'relevance',
    and 'metadata' fields.
  agent: information_retriever

# tasks.yaml (Definitive Final Version)
structure_content_task:
  agent: content_structuring_agent
  description: >
    Your single objective is to transform the provided `RerankedResults` into a
    structured JSON `AgentOutput`. Follow these steps with extreme precision.

    **Context:**
    - The user's original query was: "{query}".
    - The input you receive is a `RerankedResults` Pydantic object.

    **Step 1: Handle Empty Input**
    - Check if the input `results` list is empty. If so, your entire output must be this exact JSON object:
      `{ "plan": null, "final_answer": "No relevant information found in the knowledge base." }`

    **Step 2: Analyze and Categorize Sources**
    - If the `results` list is NOT empty, examine the `metadata` of all documents.
    - **Crucial Logic:** If there is only ONE document in the `results` list, it is ALWAYS the Primary Source, and there are NO Supplementary Sources. The `supplementary_notes` list in your output plan must be empty.
    - If there are multiple documents, identify the **Primary Source** (most general) and **Supplementary Sources** (specific cases).

    **Step 3: Extract and Structure Content**
    - Create a `StructuredPlan` object.
    - Process the Primary Source: For each instructional step, create a `Step` object.
    - Process Supplementary Sources (if they exist): For each supplementary source, create a `SupplementarySource` object and extract `SupplementaryNote` objects.
    - **Media Handling Rule:** For ANY text you process (primary or supplementary), if a media tag is adjacent, create a `MediaInfo` object for it:
      - For `[IMAGE_INFO]`: Set `media_type` to 'IMAGE'. Put the `source` URL into the `content` field. Put the `description` into the `description` field.
      - For `[TABLE_INFO]`: Set `media_type` to 'TABLE'. Put the `markdown_table` string into the `content` field. Put the `summary` (or 'description') into the `description` field.
    - Collect all unique source `metadata` objects into the `all_sources` field.

    **Step 4: Final Output**
    - Your final output MUST be a valid JSON object matching the `AgentOutput` schema, containing either a `plan` or a `final_answer`.
  expected_output: >
    A single, valid JSON object adhering to the `AgentOutput` Pydantic schema. Your output must be based ONLY on the data present in the input `results`. Do not invent or hallucinate any data.

    # Example for a comprehensive run with multiple media types and sources:
    {
      "plan": {
        "primary_steps": [
          {
            "step_description": "[A summary of an instructional step from the primary source that has an associated image.]",
            "media_info": { "media_type": "IMAGE", "content": "http://example.com/path-to-image.png", "description": "[The description of the image from the source tag.]" }
          },
          {
            "step_description": "[A summary of another step that has an associated table.]",
            "media_info": { "media_type": "TABLE", "content": "| Header 1 | Header 2 |\\n|---|---|\\n| Data A | Data B |", "description": "[The summary of the table from the source tag.]" }
          },
          {
            "step_description": "[A summary of a final step that has no associated media.]",
            "media_info": null
          }
        ],
        "supplementary_notes": [
          {
            "source_page": "[Title of a supplementary document]",
            "notes": [ { "note_description": "[A specific rule or note from the supplementary document.]", "media_info": null } ]
          }
        ],
        "all_sources": [
            {"page_title": "[Title of Primary Source]", "section_name": "[Section of Primary Source]"},
            {"page_title": "[Title of a supplementary document]", "section_name": "[Section of supplementary document]"}
        ]
      },
      "final_answer": null
    }

    # Example for a run with only one source document and no media:
    {
      "plan": {
        "primary_steps": [
           { "step_description": "[A summary of the only step found in the single document.]", "media_info": null }
        ],
        "supplementary_notes": [],
        "all_sources": [ {"page_title": "[Title of the single source document]", "section_name": "[Section from the document]"} ]
      },
      "final_answer": null
    }

    # Example for a run with empty input results:
    {
      "plan": null,
      "final_answer": "No relevant information found in the knowledge base."
    }

render_markdown_task:
  agent: markdown_rendering_agent
  description: >
    Your single objective is to render the provided `AgentOutput` JSON into a final,
    user-facing Markdown document.

    **Step 1: Check for Final Answer**
    - If the `final_answer` field is not null, your entire output must be the exact string from that field.

    **Step 2: Render the Plan**
    - If the `plan` field is not null, proceed with rendering.
    - Render the `primary_steps` list into a clear, numbered list.
    - **Media Rendering Rule:** For each step, if `media_info` is present, you MUST check the `media_type` field:
      - If `media_type` is 'IMAGE', render it using the format `![description](content)`.
      - If `media_type` is 'TABLE', render the raw `content` string directly. The content IS the Markdown table.
    - Render each `SupplementarySource` object into a blockquote, applying the same media rendering rule to its notes.

    **Step 3: Add Sources Block**
    - At the end, create the `<details>` block for sources using the `all_sources` list.

    **Step 4: Final Polish**
    - Your output must be a direct and literal rendering of the JSON plan. Do NOT add any extra headings, summaries, or text OR MARKDOWN (like extra headings) that was not explicitly represented in the input JSON plan. Your only job is to format the given data, not to embellish or add to it.
  expected_output: >
    A clean, final Markdown string ready for user display.

    # Structural Example for a successful run with a plan:
    1.  [A step-by-step instruction.]
    2.  [Another step with a relevant table rendered in-line.]
        | Header 1 | Header 2 |
        |---|---|
        | Data 1 | Data 2 |

    > **Special Instructions for: [Specific Document Title]**
    > * [A key point with an image.]
    >   ![Description of the image](http://example.com/image.png)

    <details>
    <summary>Sources</summary>
    * **Page:** [Page Title] > **Section:** [Section Name]
    </details>

    # Example for a run where a final_answer was passed through:
    No relevant information found in the knowledge base.